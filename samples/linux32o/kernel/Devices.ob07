MODULE Devices;
IMPORT SYSTEM;

CONST
	UNKNOWN = 0;
	ESC = 1;
	CTRL = 29;
	LSHIFT = 42;
	RSHIFT = 54;
	ALT = 56;
	CAPS = 58;
	F1 = 57;
	F2 = 58;
	F3 = 59;
	F4 = 60;
	F5 = 61;
	F6 = 62;
	F7 = 63;
	F8 = 64;
	F9 = 65;
	F10 = 66;
	NUMLCK = 67;
	SCRLCK = 68;
	HOME = 69;
	UP = 70;
	PGUP = 71;
	LEFT = 73;
	RIGHT = 75;
	ENDK = 77;
	DOWN = 78;
	PGDOWN = 79;
	INS = 80;
	DEL  = 81;
	F11 = 85;
	F12 = 86;
	
	KEYS = 128;
	KEY_PRESSED* = 0;
	KEY_RELEASED* = 1;

TYPE
	
	UINT32 = INTEGER;
	UINT16 = WCHAR;
	UINT8 = BYTE;

	Device* = RECORD
	END;
	
	Port* = RECORD (Device)
		number: BYTE
	END;
	
	Keyboard* = RECORD (Device)
		cmd, data: Port
	END;
	
	KeyEvent* = RECORD
		code*, status*: BYTE;
		chr*: CHAR
	END;


VAR
	lowerKeys, upperKeys: ARRAY 128 OF BYTE;
	isCapsLockOn, isShiftPressed: BOOLEAN; 

PROCEDURE NewPort*(VAR port: Port; number: BYTE);
BEGIN
	port.number := number;
END NewPort;


PROCEDURE [oberon] write8(port: UINT32; value: UINT8);
BEGIN
	SYSTEM.CODE(
		66H, 8BH, 55H, 08H,	(* mov    0x8(%ebp),%dx *)
		8AH, 45H, 0CH,		(* mov    0xc(%ebp),%al *)
		0EEH                (* out    %al,(%dx) *)
	);
END write8;


PROCEDURE [oberon] read8(port: UINT32; VAR data: UINT8);
BEGIN
	SYSTEM.CODE(
		66H, 8BH, 55H, 08H,	(* mov	0x8(%ebp),%dx	*)
		0ECH,              	(* in	(%dx),%al		*)
		8BH, 5DH, 0CH,      (* mov	0xc(%ebp),%ebx	*)
		89H, 03H            (* mov	%eax,(%ebx)		*)
	);
END read8;


PROCEDURE Write8*(VAR port: Port; data: UINT8);
BEGIN
	write8(port.number, data);
END Write8;


PROCEDURE Read8*(VAR port: Port; VAR data: UINT8);
BEGIN
	read8(port.number, data);
END Read8;


PROCEDURE NewKeyboard*(VAR kbd: Keyboard);
BEGIN
	NewPort(kbd.cmd, 064H);
	NewPort(kbd.data, 060H);
END NewKeyboard;


PROCEDURE InitKeyboard*(VAR kbd: Keyboard);
VAR
	s1, s2: SET;
	status: UINT8;
BEGIN

	Write8(kbd.cmd, 0AEH);
	Write8(kbd.cmd, 020H);
	
	Read8(kbd.data, status);
	s1 := BITS(status) + BITS(1H);
	s2 := BITS(0EFH); // ~0x10
	s1 := s1 * s2;
	SYSTEM.PUT8(SYSTEM.ADR(status), ORD(s1));

	Write8(kbd.cmd, 060H);
	Write8(kbd.data, status);
	Write8(kbd.data, 0F4H);
	
END InitKeyboard;


PROCEDURE ReadKey*(VAR kbd: Keyboard; VAR evt: KeyEvent);
VAR
	s: SET;
	code, status: BYTE;
BEGIN 

	Read8(kbd.data, code);
	s := BITS(code) * BITS(7FH);
	SYSTEM.PUT8(SYSTEM.ADR(evt.code), ORD(s));
	
	Read8(kbd.data, status);
	s := BITS(status) * BITS(80H);
	SYSTEM.PUT8(SYSTEM.ADR(evt.status), ORD(s));
	
	CASE evt.code OF
	| CAPS:
		IF evt.status = KEY_PRESSED THEN
			isCapsLockOn := ~ isCapsLockOn;		
		END;
	| LSHIFT, RSHIFT:
		IF evt.status = KEY_PRESSED THEN
			isShiftPressed := (evt.code = LSHIFT) OR (evt.code = RSHIFT);
		ELSE
			isShiftPressed := FALSE;
		END;
	ELSE
		IF isCapsLockOn & isShiftPressed THEN
			evt.chr := CHR(lowerKeys[evt.code]);
		ELSIF isCapsLockOn OR isShiftPressed THEN
			evt.chr := CHR(upperKeys[evt.code]);
		ELSE
			evt.chr := CHR(lowerKeys[evt.code]);
		END;
	END;
	
END ReadKey;


PROCEDURE InitKeys();
VAR 
	i: INTEGER;
BEGIN

	isCapsLockOn := FALSE;
	isShiftPressed := FALSE;
	
	FOR i := 0 TO KEYS - 1 DO
		lowerKeys[i] := UNKNOWN;
		upperKeys[i] := UNKNOWN;
	END;
	
	lowerKeys[ESC] := ESC;
	lowerKeys[CTRL] := CTRL;
	lowerKeys[LSHIFT] := LSHIFT;
	lowerKeys[RSHIFT] := RSHIFT;
	lowerKeys[ALT] := ALT;
	lowerKeys[CAPS] := CAPS;
	
	lowerKeys[2] := ORD('1');
	lowerKeys[3] := ORD('2');
	lowerKeys[4] := ORD('3');
	lowerKeys[5] := ORD('4');
	lowerKeys[6] := ORD('5');
	lowerKeys[7] := ORD('6');
	lowerKeys[8] := ORD('7');
	lowerKeys[9] := ORD('8');
	lowerKeys[10] := ORD('9');
	lowerKeys[11] := ORD('0');
	lowerKeys[12] := ORD('-');
	lowerKeys[13] := ORD('=');
	//lowerKeys[14] := ORD('\b');
	//lowerKeys[15] := ORD('\t');
	lowerKeys[16] := ORD('q');
	lowerKeys[17] := ORD('w');
	lowerKeys[18] := ORD('e');
	lowerKeys[19] := ORD('r');
	lowerKeys[20] := ORD('t');
	lowerKeys[21] := ORD('y');
	lowerKeys[22] := ORD('u');
	lowerKeys[23] := ORD('i');
	lowerKeys[24] := ORD('o');
	lowerKeys[25] := ORD('p');
	lowerKeys[26] := ORD('[');
	lowerKeys[27] := ORD(']');
	lowerKeys[28] := ORD(0AX);
	lowerKeys[30] := ORD('a');
	lowerKeys[31] := ORD('s');
	lowerKeys[32] := ORD('d');
	lowerKeys[33] := ORD('f');
	lowerKeys[34] := ORD('g');
	lowerKeys[35] := ORD('h');
	lowerKeys[36] := ORD('j');
	lowerKeys[37] := ORD('k');
	lowerKeys[38] := ORD('l');
	lowerKeys[39] := ORD(';');
	lowerKeys[40] := ORD("'");
	lowerKeys[43] := ORD('\');
	lowerKeys[44] := ORD('z');
	lowerKeys[45] := ORD('x');
	lowerKeys[46] := ORD('c');
	lowerKeys[47] := ORD('v');
	lowerKeys[48] := ORD('b');
	lowerKeys[49] := ORD('n');
	lowerKeys[50] := ORD('m');
	lowerKeys[51] := ORD(',');
	lowerKeys[52] := ORD('.');
	lowerKeys[53] := ORD('/');	
	lowerKeys[57] := ORD(' ');
	
	// Upper keys
	upperKeys[ESC] := ESC;
	upperKeys[CTRL] := CTRL;
	upperKeys[LSHIFT] := LSHIFT;
	upperKeys[RSHIFT] := RSHIFT;
	upperKeys[ALT] := ALT;
	upperKeys[CAPS] := CAPS;
	
	upperKeys[2] := ORD('!');
	upperKeys[3] := ORD('@');
	upperKeys[4] := ORD('#');
	upperKeys[5] := ORD('$');
	upperKeys[6] := ORD('%');
	upperKeys[7] := ORD('^');
	upperKeys[8] := ORD('&');
	upperKeys[9] := ORD('*');
	upperKeys[10] := ORD('(');
	upperKeys[11] := ORD(')');
	upperKeys[12] := ORD('_');
	upperKeys[13] := ORD('+');
	//upperKeys[14] := ORD('\b');
	//upperKeys[15] := ORD('\t');
	upperKeys[16] := ORD('Q');
	upperKeys[17] := ORD('W');
	upperKeys[18] := ORD('E');
	upperKeys[19] := ORD('R');
	upperKeys[20] := ORD('T');
	upperKeys[21] := ORD('Y');
	upperKeys[22] := ORD('U');
	upperKeys[23] := ORD('I');
	upperKeys[24] := ORD('O');
	upperKeys[25] := ORD('P');
	upperKeys[26] := ORD('{');
	upperKeys[27] := ORD('}');
	upperKeys[28] := ORD(0AX);
	upperKeys[30] := ORD('A');
	upperKeys[31] := ORD('S');
	upperKeys[32] := ORD('D');
	upperKeys[33] := ORD('F');
	upperKeys[34] := ORD('G');
	upperKeys[35] := ORD('H');
	upperKeys[36] := ORD('J');
	upperKeys[37] := ORD('K');
	upperKeys[38] := ORD('L');
	upperKeys[39] := ORD(':');
	upperKeys[40] := ORD('"');
	upperKeys[43] := ORD('|');
	upperKeys[44] := ORD('Z');
	upperKeys[45] := ORD('X');
	upperKeys[46] := ORD('C');
	upperKeys[47] := ORD('V');
	upperKeys[48] := ORD('B');
	upperKeys[49] := ORD('N');
	upperKeys[50] := ORD('M');
	upperKeys[51] := ORD('<');
	upperKeys[52] := ORD('>');
	upperKeys[53] := ORD('?');	

END InitKeys;


BEGIN
	InitKeys();
END Devices.
