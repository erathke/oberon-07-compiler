MODULE Coroutines;
IMPORT SYSTEM, Out := Out_sys;

CONST 
	IDLE* = 0;
	RUNNING* = 1;
	SUSPENDED* = 2;
	DEAD* = 4;
	
TYPE
	UINT32 = INTEGER;
	PID* = INTEGER;
	
	Userdata* = POINTER TO RECORD
	END;
	
	Context* = POINTER TO ContextDesc;
	
	Handler* = PROCEDURE (ctx: Context; r: INTEGER): INTEGER;
	
	ContextDesc = RECORD
		csp, stkbase: UINT32;
		stksize: INTEGER;
		handler: Handler;
		user*: Userdata
	END;
	

PROCEDURE [extern, "coroutine_init32"] coro_init(ctx: UINT32; handlerAddr: UINT32; stackAddr: UINT32);
PROCEDURE [extern, "coroutine_yield32"] coro_yield(ctx: UINT32; data: UINT32): INTEGER;


PROCEDURE LogContext(VAR ctx: Context);
VAR
	addr: UINT32;
BEGIN
	
	Out.String("=================="); Out.Ln;
	Out.String("sp  : "); Out.Int(ctx.csp, 0); Out.Ln;
	Out.String("base: "); Out.Int(ctx.stkbase, 0); Out.Ln;
	Out.String("size: "); Out.Int(ctx.stksize, 0); Out.Ln;
	addr := SYSTEM.VAL(ctx.handler, UINT32);
	Out.String("handler: "); Out.Int(addr, 0); Out.Ln;
	addr := SYSTEM.VAL(ctx.user, UINT32);
	Out.String("user: "); Out.Int(addr, 0); Out.Ln;
	Out.String("=================="); Out.Ln;
END LogContext;


PROCEDURE [ccall] EntryPoint(ctxAddr: UINT32; r: INTEGER): INTEGER;
VAR
	ctx: Context;
BEGIN
	ctx := SYSTEM.VAL(ctxAddr, Context);
	RETURN ctx.handler(ctx, r)
END;


PROCEDURE Create*(handler: Handler; VAR stack: ARRAY OF BYTE; data: Userdata): Context;
VAR
	ctx: Context;
	baseAddr, spAddr, spIdx : UINT32;
	handlerAddr: UINT32;
	stksize: INTEGER;
BEGIN
	stksize := LEN(stack);
	baseAddr := SYSTEM.ADR(stack[0]);
	spIdx := stksize - SYSTEM.SIZE(ContextDesc);
	spAddr := SYSTEM.ADR(stack[spIdx]);
	ctx := SYSTEM.VAL(spAddr, Context);
	
	ctx.csp := spAddr;
	ctx.stkbase := baseAddr;
	ctx.stksize := stksize;
	ctx.handler := handler;
	ctx.user := data;
	
	handlerAddr := SYSTEM.ADR(EntryPoint);
	coro_init(spAddr, handlerAddr, spAddr);
	
	RETURN ctx
END Create;


PROCEDURE Yield*(ctx: Context; r: INTEGER): INTEGER;
VAR
	addr: UINT32;
BEGIN
	addr := SYSTEM.VAL(ctx, UINT32);
	RETURN coro_yield(addr, r)
END Yield;

	
END Coroutines.
