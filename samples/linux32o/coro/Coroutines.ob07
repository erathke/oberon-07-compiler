MODULE Coroutines;
IMPORT SYSTEM, Out := Out_sys;

CONST 
	IDLE* = 0;
	RUNNING* = 1;
	SUSPENDED* = 2;
	DEAD* = 4;
	
	STACK_SIZE = 4096;

TYPE
	UINT32 = INTEGER;
	PID* = INTEGER;
	
	Userdata* = POINTER TO RECORD
	END;
	
	Context = ARRAY 4 OF UINT32;
	
	Coroutine* = POINTER TO CoroutineDesc;
	
	Handler* = PROCEDURE (coro: Coroutine; r: INTEGER): INTEGER;
	
	CoroutineDesc = RECORD
		ctx: Context;
		stack: ARRAY STACK_SIZE OF BYTE
	END;
	

PROCEDURE [extern, "coroutine_init32"] coro_init(ctx: UINT32; handlerAddr: UINT32; stackAddr: UINT32);
PROCEDURE [extern, "coroutine_yield32"] coro_yield(ctx: UINT32; data: UINT32): INTEGER;


PROCEDURE LogContext(VAR ctx: Context);
BEGIN
	Out.String("=================="); Out.Ln;
	Out.String("sp  : "); Out.Int(ctx[0], 0); Out.Ln;
	Out.String("base: "); Out.Int(ctx[1], 0); Out.Ln;
	Out.String("size: "); Out.Int(ctx[2], 0); Out.Ln;
	Out.String("user: "); Out.Int(ctx[3], 0); Out.Ln;
	Out.String("=================="); Out.Ln;
END LogContext;


PROCEDURE Create*(handler: Handler; data: Userdata): Coroutine;
VAR
	coro: Coroutine;
	baseAddr, spAddr : UINT32;
BEGIN
	NEW(coro);
	//coro.data := data;
	//coro.state := IDLE;
	
	baseAddr := SYSTEM.ADR(coro.stack[0]);
	spAddr := baseAddr + STACK_SIZE - SYSTEM.SIZE(Context);
	coro.ctx := SYSTEM.VAL(spAddr, Context);
	coro.ctx[0] := spAddr;
	coro.ctx[1] := baseAddr;
	coro.ctx[2] := STACK_SIZE; // TODO: user stack size?
	coro.ctx[3] := SYSTEM.ADR(coro);
	LogContext(coro.ctx);
	coro_init(spAddr, SYSTEM.ADR(handler), baseAddr);
	
	LogContext(coro.ctx);
	RETURN coro
END Create;


PROCEDURE Yield*(coro: Coroutine; VAR r: INTEGER);
BEGIN
(*
    IF coro.state = DEAD THEN
		Out.String("cannot resume dead coroutine."); Out.Ln;
	ELSE
		IF coro.state = IDLE THEN
			coro.state := RUNNING;
		END;
		
	END;
*)
	//coro_yield(SYSTEM.ADR(coro.ctx), 10);
	r := coro_yield(SYSTEM.ADR(coro.ctx), r);
END Yield;

	
END Coroutines.
