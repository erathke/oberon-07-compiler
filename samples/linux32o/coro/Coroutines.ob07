MODULE Coroutines;
IMPORT SYSTEM, Out := Out_sys;

CONST 
	IDLE* = 0;
	RUNNING* = 1;
	SUSPENDED* = 2;
	DEAD* = 4;
	
	STACK_SIZE = 2 * 1024;

TYPE
	UINT32 = INTEGER;
	PID* = INTEGER;
	
	Userdata* = POINTER TO RECORD
	END;
	
	Context* = POINTER TO ContextDesc;
	
	Handler* = PROCEDURE [ccall] (ctx: UINT32; r: INTEGER): INTEGER;
	
	ContextDesc = RECORD
		csp, stkbase: UINT32;
		stksize: INTEGER;
		handler: Handler;
		user*: Userdata
	END;
	

PROCEDURE [extern, "coroutine_init32"] coro_init(ctx: UINT32; handlerAddr: UINT32; stackAddr: UINT32);
PROCEDURE [extern, "coroutine_yield32"] coro_yield(ctx: UINT32; data: UINT32): INTEGER;
PROCEDURE [extern, "coroutine_yield32"] Yield*(ctx: UINT32; data: UINT32): INTEGER;


PROCEDURE LogContext(VAR ctx: Context);
VAR
	addr: UINT32;
BEGIN
	
	Out.String("=================="); Out.Ln;
	Out.String("sp  : "); Out.Int(ctx.csp, 0); Out.Ln;
	Out.String("base: "); Out.Int(ctx.stkbase, 0); Out.Ln;
	Out.String("size: "); Out.Int(ctx.stksize, 0); Out.Ln;
	addr := SYSTEM.VAL(ctx.handler, UINT32);
	Out.String("handler: "); Out.Int(addr, 0); Out.Ln;
	addr := SYSTEM.VAL(ctx.user, UINT32);
	Out.String("user: "); Out.Int(addr, 0); Out.Ln;
	Out.String("=================="); Out.Ln;
END LogContext;


PROCEDURE EntryPoint(ctxAddr: UINT32; r: INTEGER): INTEGER;
VAR
	ctx: Context;
	handler: Handler;
	x: INTEGER;
BEGIN

	Out.String("aqui: ");  Out.Int(ctxAddr, 0); Out.Ln;
	ctx := SYSTEM.VAL(ctxAddr, Context);
	LogContext(ctx);
	handler := ctx.handler; //SYSTEM.VAL(ctx.handler, Handler);
	//x := handler(ctx, r);
	x := handler(ctxAddr, r);
	Out.String("x: "); Out.Int(x, 0); Out.Ln;
	RETURN x
END;

//PROCEDURE Create*(handler: Handler; VAR stack: ARRAY OF BYTE; data: Userdata): Context;
PROCEDURE Create*(handler: Handler; VAR stack: ARRAY OF BYTE; data: Userdata): UINT32;
VAR
	ctx: Context;
	baseAddr, spAddr, spIdx : UINT32;
	handlerAddr: UINT32;
BEGIN
	
	baseAddr := SYSTEM.ADR(stack[0]);
	spIdx := STACK_SIZE - SYSTEM.SIZE(ContextDesc);
	spAddr := SYSTEM.ADR(stack[spIdx]);
	ctx := SYSTEM.VAL(spAddr, Context);
	
	ctx.csp := spAddr;
	ctx.stkbase := baseAddr;
	ctx.stksize := LEN(stack);
	ctx.handler := handler;
	ctx.user := data;
	
	LogContext(ctx);
	handlerAddr := SYSTEM.VAL(handler, UINT32);
	coro_init(spAddr, handlerAddr, spAddr);
	LogContext(ctx);
	RETURN spAddr
END Create;

(*
PROCEDURE Yield*(ctx: Context; r: INTEGER): INTEGER;
VAR
	addr: UINT32;
	x: INTEGER;
BEGIN
	addr := SYSTEM.VAL(ctx, UINT32);
	Out.String("yielding... ");
	x := coro_yield(addr, r);
	Out.String("yielded."); Out.Ln;
	RETURN x
END Yield;
*)
	
END Coroutines.
